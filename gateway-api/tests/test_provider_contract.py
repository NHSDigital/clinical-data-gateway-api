"""Provider contract tests to verify the Flask API meets the consumer contract.

This test suite verifies that the actual Flask provider implementation
satisfies the contracts defined by consumers.
"""

import pytest
from pact import Verifier
from gateway_api.main import app
import threading
import time


@pytest.fixture(scope='module')
def provider_url():
    """Start the Flask app in a separate thread and return its URL."""
    # Use port 0 to let the OS assign a free port
    import socket

    # Find a free port
    sock = socket.socket()
    sock.bind(('', 0))
    port = sock.getsockname()[1]
    sock.close()

    def run_app():
        app.run(port=port, debug=False, use_reloader=False)

    # Start Flask in a daemon thread
    thread = threading.Thread(target=run_app, daemon=True)
    thread.start()

    # Give the server time to start
    time.sleep(1)

    return f'http://localhost:{port}'


class TestProviderContract:
    """Provider contract tests to verify the API implementation."""

    def test_provider_honors_consumer_contract(self, provider_url):
        """Verify that the provider satisfies all consumer contracts.

        This test verifies the Flask API against the pact files
        generated by consumer tests.
        """
        # Create a verifier for the provider
        verifier = Verifier(name='GatewayAPIProvider')

        # Add the transport (how to connect to the provider)
        verifier.add_transport(url=provider_url)

        # Add the pact file as a source
        verifier.add_source('tests/pacts/GatewayAPIConsumer-GatewayAPIProvider.json')

        # Verify the provider against the pact
        try:
            verifier.verify()
        except Exception as e:
            pytest.fail(f"Pact verification failed: {e}")

    def test_provider_is_accessible(self, provider_url):
        """Test that the provider is running and accessible."""
        import requests

        response = requests.get(provider_url)
        assert response.status_code == 200
        assert response.text == 'Hello, World!'
